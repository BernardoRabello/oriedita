name: Release Jar and exe

on:
  push:
    tags:
      - "v*.*"
jobs:
  create_jar:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Set the version
        run: mvn -B versions:set -DnewVersion="${{ steps.get_version.outputs.version-without-v }}" --file pom.xml

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/oriedita-*.jar

  create_executable:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: pwsh

    strategy:
      matrix:
        os:
          - 'windows-latest'
          - 'ubuntu-latest'
          - 'macos-latest'

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Set the version
        run: mvn -B versions:set -DnewVersion="${{ steps.get_version.outputs.version-without-v }}" --file pom.xml

      - name: Build project and prepare JRE
        run: |
          mvn -B clean package --file pom.xml
          mkdir lib
          mkdir ci-build
          cp oriedita/target/oriedita-${{ steps.get_version.outputs.version-without-v }}.jar lib/
          $deps = jdeps --print-module-deps --ignore-missing-deps lib/oriedita-${{ steps.get_version.outputs.version-without-v }}.jar
          jlink --add-modules $deps --output ci-build/oriedita-runtime

      - name: Create portable executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          jpackage `
            @build/jpackage-common.txt `
            @build/jpackage-common-linux.txt `
            --type app-image `
            --name "Oriedita" `
            --app-version ${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }} `
            --main-jar oriedita-${{ steps.get_version.outputs.version-without-v }}.jar `

      - name: Create portable executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          jpackage `
            @build/jpackage-common.txt `
            @build/jpackage-common-win.txt `
            --type app-image `
            --name "Oriedita" `
            --app-version ${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }} `
            --main-jar oriedita-${{ steps.get_version.outputs.version-without-v }}.jar `

      - name: Create portable executable (Mac)
        if: matrix.os == 'macos-latest'
        run: |
          jpackage `
            @build/jpackage-common.txt `
            @build/jpackage-common-mac.txt `
            --type app-image `
            --name "Oriedita" `
            --app-version ${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }} `
            --main-jar oriedita-${{ steps.get_version.outputs.version-without-v }}.jar `

      - name: Create zip for portable executable (Windows)
        if: matrix.os == 'windows-latest'
        uses: papeloto/action-zip@v1
        with:
          files: 'ci-build/Oriedita'
          dest: ci-build/Oriedita Portable (Windows) ${{ steps.get_version.outputs.version-without-v }}.zip

      - name: Create zip for portable executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: papeloto/action-zip@v1
        with:
          files: 'ci-build/Oriedita'
          dest: ci-build/Oriedita Portable (Linux) ${{ steps.get_version.outputs.version-without-v }}.zip

      - name: Create installer (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          jpackage `
            @build/jpackage-common.txt `
            @build/jpackage-common-win.txt `
            @build/jpackage-installer.txt `
            @build/jpackage-installer-win.txt `
            --name "Oriedita" `
            --app-version ${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }} `
            --main-jar oriedita-${{ steps.get_version.outputs.version-without-v }}.jar `

      - name: Create DEB (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          jpackage `
            @build/jpackage-common.txt `
            @build/jpackage-common-linux.txt `
            @build/jpackage-installer.txt `
            @build/jpackage-installer-linux.txt `
            --name "Oriedita" `
            --app-version ${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }} `
            --main-jar oriedita-${{ steps.get_version.outputs.version-without-v }}.jar `

      - name: Create DMG (Mac)
        if: matrix.os == 'macos-latest'
        run: |
          jpackage `
            @build/jpackage-common.txt `
            @build/jpackage-common-mac.txt `
            @build/jpackage-installer.txt `
            @build/jpackage-installer-mac.txt `
            --name "Oriedita" `
            --app-version ${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }} `
            --main-jar oriedita-${{ steps.get_version.outputs.version-without-v }}.jar `

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ci-build/oriedita*.jar
            ci-build/Oriedita*.exe
            ci-build/Oriedita*.deb
            ci-build/Oriedita*.zip
            ci-build/Oriedita*.app
            ci-build/Oriedita*.dmg
