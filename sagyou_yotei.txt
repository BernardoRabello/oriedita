作業予定メモ


add_frame.toFront();




20200930チェックボックスの使い方


if (ckbox_cp_kaizen_oritatami.isSelected()){//展開図のおかしい所（枝状の折り線等）を自動修正する

//int ckbox_add_frame_to_front_isSelected=1;//1=add_frameは常に前面。,0前後は、操作に応じて。 20200930
int ckbox_add_frame_SelectAnd3click_isSelected=1;//1=折線セレクト状態でトリプルクリックするとmoveやcopy等の動作モードに移行する。 20200930












20180227
折り上がり予想実施前の針金図の段階ではSVGファイルがちゃんと出力できないことの警告追加　suitei_dankai利用できそう

3d表示

折り上がり図の保存

selectされた部分だけでのSVG出力

展開図や補助線、折り上がり図の表示on_offしたとき表示されたとおりにsvgできるか確認







//マウス操作(ボタンを離したとき)を行う関数
	public void mReleased_A_10(Ten p0){
		if(i_egaki_dankai==3){
			i_egaki_dankai=0;

			//２つの点t1,t2を通る直線に関して、点pの対照位置にある点を求める public Ten oc.sentaisyou_ten_motome(Ten t1,Ten t2,Ten p){
			Ten t_taisyou =new Ten(); t_taisyou.set(oc.sentaisyou_ten_motome(s_step[2].geta(),s_step[3].geta(),s_step[1].geta()));


			Senbun add_sen =new Senbun(s_step[2].geta(),t_taisyou);


			//oc.senbun_kousa_hantei(Senbun s1,Senbun s2,double rhit,double rhei)

			Ten kousa_point =new Ten(1000000.0,1000000.0); //この方法だと、エラーの原因になりうる。本当なら全線分のx_max、y_max以上の点を取ればいい。今後修正予定20161120
			double kousa_ten_kyori=kousa_point.kyori(s_step[2].geta());



20161224 

変形コピー　31
変形移動　　32

任意３角度入力a
任意３角度入力b

二重線自動修正

折線の端以外に他の折線の端　チェック＆線自動修正

頂点の角度　チェック＆線自動修正